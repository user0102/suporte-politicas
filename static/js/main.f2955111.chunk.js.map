{"version":3,"sources":["logo.svg","componentes/titulos.js","componentes/cuerpo.js","componentes/link.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Titulo","class","className","this","props","texto","React","Component","Cuerpo","Link","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0KAAAA,EAAOC,QAAU,IAA0B,kC,8HCgB5BC,G,wLAVP,OACI,yBAAKC,MAAM,OACP,6BACI,wBAAIC,UAAY,SAASC,KAAKC,MAAMC,a,GALnCC,IAAMC,YCYZC,E,uKAVP,OACI,yBAAKP,MAAM,OACP,uBAAGA,MAAQ,WACNE,KAAKC,MAAMC,Y,GALXC,IAAMC,WCUZE,E,uKARP,OACI,yBAAKR,MAAQ,QACT,uBAAGS,KAAO,iDAAV,sD,GAJGJ,IAAMC,WCuBVI,E,uKAhBX,OACE,6BACE,kBAAC,EAAD,CAAQN,MAAQ,kEAClB,kBAAC,EAAD,CACAA,MAAQ,oLAER,kBAAC,EAAD,CAAQA,MAAQ,8CAChB,kBAAC,EAAD,CACAA,MAAQ,2JAER,kBAAC,EAAD,W,GAZYC,IAAMC,WCGJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f2955111.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport {render} from \"react-dom\";\nimport \"./titulo.css\";\n\nclass Titulo extends React.Component {\n    render() {\n        return (\n            <div class=\"tar\">\n                <div>\n                    <h4 className = \"title\">{this.props.texto}</h4>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Titulo;\n\n","import React from \"react\";\nimport {Container, Card, CardTitle, Col} from \"reactstrap\";\nimport {render} from \"react-dom\";\n\nclass Cuerpo extends React.Component {\n    render() {\n        return (\n            <div class=\"tar\">\n                <p class = \"parrafo\">\n                    {this.props.texto}\n                </p>\n            </div>\n        )\n    }\n}\n\nexport default Cuerpo;","import React from \"react\";\nimport {render} from \"react-dom\";\nimport \"./titulo.css\";\n\nclass Link extends React.Component {\n    render() {\n        return (\n            <div class = \"link\">\n                <a href = \"https://policies.google.com/technologies/ads?\">https://policies.google.com/technologies/ads?</a>\n            </div>\n        )\n    }\n}\n\nexport default Link;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {render} from \"react-dom\";\nimport Titulo from \"./componentes/titulos\";\nimport { Row, Container } from 'reactstrap';\nimport Cuerpo from './componentes/cuerpo';\nimport Link from \"./componentes/link\"\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Titulo texto = \"What information does the application get and how is it used?\" />\n      <Cuerpo \n      texto = \"The application does not require any type of registration, it only requires that there is an Apple Store account to download it, The application does not collect personal data\"\n      />\n      <Titulo texto = \"automatic data collection and advertising\"/>\n      <Cuerpo \n      texto = \"I can work with advertisers and networks of third-party advertisers, who need to know how to interact with the advertising present in the application,\"\n      />\n      <Link/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}